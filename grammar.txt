#---------------------------------------
# Statements
#---------------------------------------

stmt      : block
          | breakStmt
          | contStmt
          | declStmt
          | exprStmt
          | ifStmt
          | readStmt
          | repeatStmt
          | whileStmt
          | writeStmt
          | caseStmt

ifStmt	  : stmt
		  | checkStmt

stmts     : stmts ';' stmt
          | stmt

ifStmts   : ifStmts ';' ifStmt
          | ifStmt


#---------------------------------------

block     	: '{' stmts ';' '}'

ifBlock		: '{' ifStmts ';' '}'

#---------------------------------------

breakStmt   : 'break'

contStmt    : 'continue'

declStmt    : 'var' ID varType ':=' expr 
			| 'var' ID varType

exprStmt    : expr

ifStmt      : 'if' '(' expr ')' ifBlock elifChain 'else' block
			| 'if' '(' expr ')' ifBlock 'else' block
			| 'if' '(' expr ')' ifBlock elifChain
			| 'if' '(' expr ')' ifBlock

multiIfStmt : 'if' '[' integer ']' exprList ifBlock elifChain 'else' block
			| 'if' '[' integer ']' exprList ifBlock 'else' block
			| 'if' '[' integer ']' exprList ifBlock elifChain
			| 'if' '[' integer ']' exprList ifBlock 

elifChain	: multiElif 
			| elif

multiElif	: 'elif '[' integer ']' exprList ifBlock elifChain
			| 'elif '[' integer ']' exprList ifBlock

elif		: 'elif '(' expr ')' ifBlock elifChain
			| 'elif '(' expr ')' ifBlock 

readStmt    : 'read' exprList

repeatStmt  : 'repeat' block 'until' expr

whileStmt   : 'while' expr block

writeStmt   : 'write' exprList

caseStmt    : 'case' integer block

checkStmt	: 'check' '(' integer ')'


#---------------------------------------
# Expressions
#---------------------------------------

expr        : prefixOpr expr
            | expr binaryOpr expr
            | number
            | stringLiteral
            | '(' expr ')'
            | ID

number		: integer
			| real

varType		: 'integer'
			| 'real'
			| 'string'

exprList    : exprList ',' '(' expr ')'
            | '(' expr ')'

# Prefix (unary) operators :
#   Math      : '+' '-'
#   Logical   : 'not'

# Binary operators :
#   Assignment    : '<-'
#   Math          : '+' '-' '*' '/' '%' '^' '?'
#   Relational    : '<' '<=' '>=' '>' '<>' '=='
#   Logical       : 'and' 'or'

#---------------------------------------
# Operator precedence, lowest to highest
#---------------------------------------
Logical OR
Logical AND
Relational EQ and NE
Relational LT, LE, GE, GT
Math random number (?)
Math add, subtract
Math multiply, divide, modulus
Math exponent
Math prefix -, Math prefix +, Logical prefix NOT

#---------------------------------------

